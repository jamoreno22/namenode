// Code generated by protoc-gen-go. DO NOT EDIT.
// source: General.proto

package lab2

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Book struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Parts                int32    `protobuf:"varint,2,opt,name=parts,proto3" json:"parts,omitempty"`
	Chunks               []*Chunk `protobuf:"bytes,3,rep,name=chunks,proto3" json:"chunks,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Book) Reset()         { *m = Book{} }
func (m *Book) String() string { return proto.CompactTextString(m) }
func (*Book) ProtoMessage()    {}
func (*Book) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad40bea04b045104, []int{0}
}

func (m *Book) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Book.Unmarshal(m, b)
}
func (m *Book) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Book.Marshal(b, m, deterministic)
}
func (m *Book) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Book.Merge(m, src)
}
func (m *Book) XXX_Size() int {
	return xxx_messageInfo_Book.Size(m)
}
func (m *Book) XXX_DiscardUnknown() {
	xxx_messageInfo_Book.DiscardUnknown(m)
}

var xxx_messageInfo_Book proto.InternalMessageInfo

func (m *Book) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Book) GetParts() int32 {
	if m != nil {
		return m.Parts
	}
	return 0
}

func (m *Book) GetChunks() []*Chunk {
	if m != nil {
		return m.Chunks
	}
	return nil
}

type Chunk struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Data                 []byte   `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Chunk) Reset()         { *m = Chunk{} }
func (m *Chunk) String() string { return proto.CompactTextString(m) }
func (*Chunk) ProtoMessage()    {}
func (*Chunk) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad40bea04b045104, []int{1}
}

func (m *Chunk) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Chunk.Unmarshal(m, b)
}
func (m *Chunk) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Chunk.Marshal(b, m, deterministic)
}
func (m *Chunk) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Chunk.Merge(m, src)
}
func (m *Chunk) XXX_Size() int {
	return xxx_messageInfo_Chunk.Size(m)
}
func (m *Chunk) XXX_DiscardUnknown() {
	xxx_messageInfo_Chunk.DiscardUnknown(m)
}

var xxx_messageInfo_Chunk proto.InternalMessageInfo

func (m *Chunk) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Chunk) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type Message struct {
	Text                 string   `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad40bea04b045104, []int{2}
}

func (m *Message) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Message.Unmarshal(m, b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Message.Marshal(b, m, deterministic)
}
func (m *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(m, src)
}
func (m *Message) XXX_Size() int {
	return xxx_messageInfo_Message.Size(m)
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

func (m *Message) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

type Proposal struct {
	Ip                   string   `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Chunk                *Chunk   `protobuf:"bytes,2,opt,name=chunk,proto3" json:"chunk,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Proposal) Reset()         { *m = Proposal{} }
func (m *Proposal) String() string { return proto.CompactTextString(m) }
func (*Proposal) ProtoMessage()    {}
func (*Proposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad40bea04b045104, []int{3}
}

func (m *Proposal) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Proposal.Unmarshal(m, b)
}
func (m *Proposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Proposal.Marshal(b, m, deterministic)
}
func (m *Proposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Proposal.Merge(m, src)
}
func (m *Proposal) XXX_Size() int {
	return xxx_messageInfo_Proposal.Size(m)
}
func (m *Proposal) XXX_DiscardUnknown() {
	xxx_messageInfo_Proposal.DiscardUnknown(m)
}

var xxx_messageInfo_Proposal proto.InternalMessageInfo

func (m *Proposal) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *Proposal) GetChunk() *Chunk {
	if m != nil {
		return m.Chunk
	}
	return nil
}

func init() {
	proto.RegisterType((*Book)(nil), "lab2.Book")
	proto.RegisterType((*Chunk)(nil), "lab2.Chunk")
	proto.RegisterType((*Message)(nil), "lab2.Message")
	proto.RegisterType((*Proposal)(nil), "lab2.Proposal")
}

func init() {
	proto.RegisterFile("General.proto", fileDescriptor_ad40bea04b045104)
}

var fileDescriptor_ad40bea04b045104 = []byte{
	// 279 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x51, 0xc1, 0x4a, 0xc3, 0x40,
	0x10, 0x35, 0x6d, 0x53, 0xe3, 0xa4, 0x2d, 0x32, 0x78, 0x08, 0x82, 0x50, 0xd7, 0x4b, 0x10, 0x8c,
	0x12, 0x3d, 0x78, 0xf1, 0xa2, 0x87, 0x22, 0x68, 0x91, 0x88, 0x78, 0xde, 0x9a, 0xb1, 0x96, 0xc6,
	0xdd, 0xb0, 0xbb, 0x82, 0x3f, 0xea, 0xff, 0x98, 0xdd, 0x4d, 0x11, 0xa2, 0x17, 0x6f, 0x6f, 0xde,
	0xdb, 0xf7, 0xe6, 0x2d, 0x03, 0xe3, 0x19, 0x09, 0x52, 0xbc, 0xca, 0x6a, 0x25, 0x8d, 0xc4, 0x41,
	0xc5, 0x17, 0x39, 0x7b, 0x82, 0xc1, 0xb5, 0x94, 0x6b, 0x44, 0x18, 0x08, 0xfe, 0x4e, 0x49, 0x30,
	0x0d, 0xd2, 0x9d, 0xc2, 0x61, 0xdc, 0x83, 0xb0, 0xe6, 0xca, 0xe8, 0xa4, 0xd7, 0x90, 0x61, 0xe1,
	0x07, 0x3c, 0x82, 0xe1, 0xcb, 0xdb, 0x87, 0x58, 0xeb, 0xa4, 0x3f, 0xed, 0xa7, 0x71, 0x1e, 0x67,
	0x36, 0x28, 0xbb, 0xb1, 0x5c, 0xd1, 0x4a, 0xec, 0x14, 0x42, 0x47, 0xfc, 0x99, 0xdb, 0x70, 0x25,
	0x37, 0xdc, 0xc5, 0x8e, 0x0a, 0x87, 0xd9, 0x01, 0x6c, 0xdf, 0x93, 0xd6, 0x7c, 0xe9, 0x64, 0x43,
	0x9f, 0x66, 0x63, 0xb1, 0x98, 0x5d, 0x41, 0xf4, 0xa0, 0x64, 0x2d, 0x35, 0xaf, 0x70, 0x02, 0xbd,
	0x55, 0xdd, 0xaa, 0x0d, 0xc2, 0x43, 0x08, 0xdd, 0x56, 0x97, 0xd7, 0xe9, 0xe3, 0x95, 0xfc, 0x2b,
	0x80, 0x68, 0xde, 0xac, 0x9e, 0xcb, 0x92, 0xf0, 0x18, 0xe2, 0x19, 0x19, 0xfb, 0xeb, 0x5b, 0xf1,
	0x2a, 0x11, 0xfc, 0x7b, 0x3b, 0xef, 0x8f, 0x3d, 0x6e, 0x9b, 0xb0, 0x2d, 0x3c, 0x81, 0xe8, 0x59,
	0xad, 0x0c, 0xdd, 0xc9, 0x25, 0x4e, 0xbc, 0xb8, 0xe9, 0xf1, 0xeb, 0x71, 0x1a, 0xe0, 0x05, 0x8c,
	0x1e, 0x49, 0x94, 0x3f, 0x55, 0x3b, 0x96, 0xce, 0x6c, 0x3d, 0x67, 0x01, 0x5e, 0xc2, 0xae, 0x3f,
	0x8d, 0xa1, 0xff, 0x39, 0x17, 0x43, 0x77, 0xca, 0xf3, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0x62,
	0xac, 0x9c, 0xaf, 0xdb, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// NameNodeClient is the client API for NameNode service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NameNodeClient interface {
	GetBookInfo(ctx context.Context, in *Book, opts ...grpc.CallOption) (*Message, error)
	WriteLog(ctx context.Context, opts ...grpc.CallOption) (NameNode_WriteLogClient, error)
	//Centralizado
	SendProposal(ctx context.Context, opts ...grpc.CallOption) (NameNode_SendProposalClient, error)
	GenerateProposal(ctx context.Context, opts ...grpc.CallOption) (NameNode_GenerateProposalClient, error)
}

type nameNodeClient struct {
	cc grpc.ClientConnInterface
}

func NewNameNodeClient(cc grpc.ClientConnInterface) NameNodeClient {
	return &nameNodeClient{cc}
}

func (c *nameNodeClient) GetBookInfo(ctx context.Context, in *Book, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/lab2.NameNode/GetBookInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nameNodeClient) WriteLog(ctx context.Context, opts ...grpc.CallOption) (NameNode_WriteLogClient, error) {
	stream, err := c.cc.NewStream(ctx, &_NameNode_serviceDesc.Streams[0], "/lab2.NameNode/WriteLog", opts...)
	if err != nil {
		return nil, err
	}
	x := &nameNodeWriteLogClient{stream}
	return x, nil
}

type NameNode_WriteLogClient interface {
	Send(*Proposal) error
	CloseAndRecv() (*Message, error)
	grpc.ClientStream
}

type nameNodeWriteLogClient struct {
	grpc.ClientStream
}

func (x *nameNodeWriteLogClient) Send(m *Proposal) error {
	return x.ClientStream.SendMsg(m)
}

func (x *nameNodeWriteLogClient) CloseAndRecv() (*Message, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *nameNodeClient) SendProposal(ctx context.Context, opts ...grpc.CallOption) (NameNode_SendProposalClient, error) {
	stream, err := c.cc.NewStream(ctx, &_NameNode_serviceDesc.Streams[1], "/lab2.NameNode/SendProposal", opts...)
	if err != nil {
		return nil, err
	}
	x := &nameNodeSendProposalClient{stream}
	return x, nil
}

type NameNode_SendProposalClient interface {
	Send(*Proposal) error
	Recv() (*Proposal, error)
	grpc.ClientStream
}

type nameNodeSendProposalClient struct {
	grpc.ClientStream
}

func (x *nameNodeSendProposalClient) Send(m *Proposal) error {
	return x.ClientStream.SendMsg(m)
}

func (x *nameNodeSendProposalClient) Recv() (*Proposal, error) {
	m := new(Proposal)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *nameNodeClient) GenerateProposal(ctx context.Context, opts ...grpc.CallOption) (NameNode_GenerateProposalClient, error) {
	stream, err := c.cc.NewStream(ctx, &_NameNode_serviceDesc.Streams[2], "/lab2.NameNode/GenerateProposal", opts...)
	if err != nil {
		return nil, err
	}
	x := &nameNodeGenerateProposalClient{stream}
	return x, nil
}

type NameNode_GenerateProposalClient interface {
	Send(*Proposal) error
	Recv() (*Proposal, error)
	grpc.ClientStream
}

type nameNodeGenerateProposalClient struct {
	grpc.ClientStream
}

func (x *nameNodeGenerateProposalClient) Send(m *Proposal) error {
	return x.ClientStream.SendMsg(m)
}

func (x *nameNodeGenerateProposalClient) Recv() (*Proposal, error) {
	m := new(Proposal)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// NameNodeServer is the server API for NameNode service.
type NameNodeServer interface {
	GetBookInfo(context.Context, *Book) (*Message, error)
	WriteLog(NameNode_WriteLogServer) error
	//Centralizado
	SendProposal(NameNode_SendProposalServer) error
	GenerateProposal(NameNode_GenerateProposalServer) error
}

// UnimplementedNameNodeServer can be embedded to have forward compatible implementations.
type UnimplementedNameNodeServer struct {
}

func (*UnimplementedNameNodeServer) GetBookInfo(ctx context.Context, req *Book) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBookInfo not implemented")
}
func (*UnimplementedNameNodeServer) WriteLog(srv NameNode_WriteLogServer) error {
	return status.Errorf(codes.Unimplemented, "method WriteLog not implemented")
}
func (*UnimplementedNameNodeServer) SendProposal(srv NameNode_SendProposalServer) error {
	return status.Errorf(codes.Unimplemented, "method SendProposal not implemented")
}
func (*UnimplementedNameNodeServer) GenerateProposal(srv NameNode_GenerateProposalServer) error {
	return status.Errorf(codes.Unimplemented, "method GenerateProposal not implemented")
}

func RegisterNameNodeServer(s *grpc.Server, srv NameNodeServer) {
	s.RegisterService(&_NameNode_serviceDesc, srv)
}

func _NameNode_GetBookInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Book)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NameNodeServer).GetBookInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lab2.NameNode/GetBookInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NameNodeServer).GetBookInfo(ctx, req.(*Book))
	}
	return interceptor(ctx, in, info, handler)
}

func _NameNode_WriteLog_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(NameNodeServer).WriteLog(&nameNodeWriteLogServer{stream})
}

type NameNode_WriteLogServer interface {
	SendAndClose(*Message) error
	Recv() (*Proposal, error)
	grpc.ServerStream
}

type nameNodeWriteLogServer struct {
	grpc.ServerStream
}

func (x *nameNodeWriteLogServer) SendAndClose(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *nameNodeWriteLogServer) Recv() (*Proposal, error) {
	m := new(Proposal)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _NameNode_SendProposal_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(NameNodeServer).SendProposal(&nameNodeSendProposalServer{stream})
}

type NameNode_SendProposalServer interface {
	Send(*Proposal) error
	Recv() (*Proposal, error)
	grpc.ServerStream
}

type nameNodeSendProposalServer struct {
	grpc.ServerStream
}

func (x *nameNodeSendProposalServer) Send(m *Proposal) error {
	return x.ServerStream.SendMsg(m)
}

func (x *nameNodeSendProposalServer) Recv() (*Proposal, error) {
	m := new(Proposal)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _NameNode_GenerateProposal_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(NameNodeServer).GenerateProposal(&nameNodeGenerateProposalServer{stream})
}

type NameNode_GenerateProposalServer interface {
	Send(*Proposal) error
	Recv() (*Proposal, error)
	grpc.ServerStream
}

type nameNodeGenerateProposalServer struct {
	grpc.ServerStream
}

func (x *nameNodeGenerateProposalServer) Send(m *Proposal) error {
	return x.ServerStream.SendMsg(m)
}

func (x *nameNodeGenerateProposalServer) Recv() (*Proposal, error) {
	m := new(Proposal)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _NameNode_serviceDesc = grpc.ServiceDesc{
	ServiceName: "lab2.NameNode",
	HandlerType: (*NameNodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBookInfo",
			Handler:    _NameNode_GetBookInfo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WriteLog",
			Handler:       _NameNode_WriteLog_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "SendProposal",
			Handler:       _NameNode_SendProposal_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "GenerateProposal",
			Handler:       _NameNode_GenerateProposal_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "General.proto",
}
